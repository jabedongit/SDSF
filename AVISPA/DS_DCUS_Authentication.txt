%%% DCUS -> DS: {DCUS.DS.Na}_Kb
%%% DS -> DCUS: {DCUS.DS.Na.Password}_Ka

role role_DCUS(DCUS:agent,DS:agent,Ka:public_key,Kb:public_key,SND,RCV:channel(dy))
played_by DCUS
def=
	local
		State:nat,Na:text,Password:text
	init
		State := 0
	transition
		1. State=0 /\ RCV(start) =|> 
                   State':=1 /\ Na':=new() /\ SND({DCUS.DS.Na'}_Kb)

		2. State=1 /\ RCV({DCUS.DS.Na.Password'}_Ka) =|> 
                   State':=2 
                   
                   %% DCUS checks that he receives the same nonce 
                   %% that he sent at step 1.

                   /\ request(DCUS,DS,auth_1,Na)
end role

role role_DS(DS:agent,DCUS:agent,Password:text,Ka:public_key,Kb:public_key,SND,RCV:channel(dy))
played_by DS
def=
	local
		State:nat,Na:text
	init
		State := 0
	transition
		1. State=0 /\ RCV({DCUS.DS.Na'}_Kb) =|> 
                   
                   State':=1 /\ SND({DCUS.DS.Na'.Password}_Ka)

                   /\ secret(Password,sec_1,{DCUS,DS}) 
                   %% DS hopes that Na will permit to authenticate him
                   /\ witness(DS,DCUS,auth_1,Na')
end role

role session(DCUS:agent,DS:agent,Password:text,Ka:public_key,Kb:public_key)
def=
	local
		SND2,RCV2,SND1,RCV1:channel(dy)
	composition
		role_DS(DS,DCUS,Password,Ka,Kb,SND2,RCV2) /\ role_DCUS(DCUS,DS,Ka,Kb,SND1,RCV1)
end role

role environment()
def=
	const
		ka,kb:public_key,
                alice,university:agent,
                s1:text,
                sec_1,auth_1:protocol_id
	intruder_knowledge = {alice,university,ka,kb}
	composition
		session(alice,university,s1,ka,kb) /\ session(alice,university,s1,ka,kb)
end role

goal
	secrecy_of sec_1
        authentication_on auth_1
end goal

environment()